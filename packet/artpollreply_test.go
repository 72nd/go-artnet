package packet

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/jsimonetti/go-artnet/packet/code"
)

func TestArtPollReplyPacketMarshal(t *testing.T) {
	tests := []struct {
		name string
		p    ArtPollReplyPacket
		b    []byte
		err  error
	}{
		{
			name: "Empty",
			p: ArtPollReplyPacket{
				ID:     ArtNet,
				OpCode: code.OpPollReply,
				Port:   ArtNetPort,
			},
			b: []byte{
				0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
				0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x19, 0x36,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name: "WithInfo",
			p: ArtPollReplyPacket{
				ID:               ArtNet,
				OpCode:           code.OpPollReply,
				IPAddress:        [4]byte{0x0a, 0x01, 0x01, 0x01},
				Port:             ArtNetPort,
				VersionInfo:      0xf00d,
				NetSwitch:        0xeb,
				SubSwitch:        0xbe,
				Oem:              0xcccc,
				UBEAVersion:      0xaa,
				Status1:          new(code.Status1).WithUBEA(true),
				ESTAmanufacturer: [2]byte{0xff, 0xff},
				ShortName:        [18]byte{'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8'},
				LongName: [64]byte{
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
				},
				NodeReport: [64]code.NodeReportCode{
					code.RcFactoryRes,
				},
				NumPorts: 0xffff,
				PortTypes: [4]code.PortType{
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
				},
				GoodInput: [4]code.GoodInput{
					new(code.GoodInput).WithReceive(true),
					new(code.GoodInput).WithReceive(false),
					new(code.GoodInput).WithReceive(false),
					new(code.GoodInput).WithReceive(false),
				},
				GoodOutput: [4]code.GoodOutput{
					new(code.GoodOutput).WithACN(true),
					new(code.GoodOutput).WithACN(false),
					new(code.GoodOutput).WithACN(false),
					new(code.GoodOutput).WithACN(false),
				},
				SwIn:       [4]uint8{0x20, 0x40, 0x60, 0x80},
				SwOut:      [4]uint8{0x10, 0x30, 0x50, 0x70},
				SwVideo:    0xff,
				SwMacro:    new(code.SwMacro).WithMacro1(true),
				SwRemote:   new(code.SwRemote).WithRemote1(true),
				Style:      code.StController,
				Macaddress: [6]byte{0x00, 0x50, 0x56, 0xc0, 0x00, 0x02},
				BindIP:     [4]byte{0x0a, 0x01, 0x01, 0x01},
				BindIndex:  0xee,
				Status2:    new(code.Status2).WithBrowser(true),
			},
			b: []byte{
				0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
				0x00, 0x21, 0x0a, 0x01, 0x01, 0x01, 0x19, 0x36,
				0xf0, 0x0d, 0xeb, 0xbe, 0xcc, 0xcc, 0xaa, 0x01,
				0xff, 0xff, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
				0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
				0x35, 0x36, 0x37, 0x38, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x10, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0x07,
				0x07, 0x07, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x00, 0x00, 0x20, 0x40, 0x60, 0x80, 0x10, 0x30,
				0x50, 0x70, 0xff, 0x01, 0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x50, 0x56, 0xc0, 0x00, 0x02, 0x0a,
				0x01, 0x01, 0x01, 0xee, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b, err := tt.p.MarshalBinary()

			if want, got := tt.err, err; want != got {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if err != nil {
				return
			}

			if want, got := tt.b, b; !bytes.Equal(want, got) {
				t.Fatalf("unexpected Message bytes:\n- want: [%# x]\n-  got: [%# x]", want, got)
			}
		})
	}
}

func TestArtPollReplyPacketUnmarshal(t *testing.T) {
	tests := []struct {
		name string
		p    ArtPollReplyPacket
		b    []byte
		err  error
	}{
		{
			name: "Empty",
			p: ArtPollReplyPacket{
				ID:     ArtNet,
				OpCode: code.OpPollReply,
				Port:   ArtNetPort,
			},
			b: []byte{
				0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
				0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x19, 0x36,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			name: "WithInfo",
			p: ArtPollReplyPacket{
				ID:               ArtNet,
				OpCode:           code.OpPollReply,
				IPAddress:        [4]byte{0x0a, 0x01, 0x01, 0x01},
				Port:             ArtNetPort,
				VersionInfo:      0xf00d,
				NetSwitch:        0xeb,
				SubSwitch:        0xbe,
				Oem:              0xcccc,
				UBEAVersion:      0xaa,
				Status1:          new(code.Status1).WithUBEA(true),
				ESTAmanufacturer: [2]byte{0xff, 0xff},
				ShortName:        [18]byte{'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8'},
				LongName: [64]byte{
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
					'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
				},
				NodeReport: [64]code.NodeReportCode{
					code.RcFactoryRes,
				},
				NumPorts: 0xffff,
				PortTypes: [4]code.PortType{
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
					new(code.PortType).WithType("DMX512"),
				},
				GoodInput: [4]code.GoodInput{
					new(code.GoodInput).WithReceive(true),
					new(code.GoodInput).WithReceive(false),
					new(code.GoodInput).WithReceive(false),
					new(code.GoodInput).WithReceive(false),
				},
				GoodOutput: [4]code.GoodOutput{
					new(code.GoodOutput).WithACN(true),
					new(code.GoodOutput).WithACN(false),
					new(code.GoodOutput).WithACN(false),
					new(code.GoodOutput).WithACN(false),
				},
				SwIn:       [4]uint8{0x20, 0x40, 0x60, 0x80},
				SwOut:      [4]uint8{0x10, 0x30, 0x50, 0x70},
				SwVideo:    0xff,
				SwMacro:    new(code.SwMacro).WithMacro1(true),
				SwRemote:   new(code.SwRemote).WithRemote1(true),
				Style:      code.StController,
				Macaddress: [6]byte{0x00, 0x50, 0x56, 0xc0, 0x00, 0x02},
				BindIP:     [4]byte{0x0a, 0x01, 0x01, 0x01},
				BindIndex:  0xee,
				Status2:    new(code.Status2).WithBrowser(true),
			},
			b: []byte{
				0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
				0x00, 0x21, 0x0a, 0x01, 0x01, 0x01, 0x19, 0x36,
				0xf0, 0x0d, 0xeb, 0xbe, 0xcc, 0xcc, 0xaa, 0x01,
				0xff, 0xff, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
				0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34,
				0x35, 0x36, 0x37, 0x38, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x10, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0x07,
				0x07, 0x07, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x00, 0x00, 0x20, 0x40, 0x60, 0x80, 0x10, 0x30,
				0x50, 0x70, 0xff, 0x01, 0x01, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x50, 0x56, 0xc0, 0x00, 0x02, 0x0a,
				0x01, 0x01, 0x01, 0xee, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var a ArtPollReplyPacket
			err := a.UnmarshalBinary(tt.b)

			if want, got := tt.err, err; want != got {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if err != nil {
				return
			}

			if want, got := tt.p, a; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected Message bytes:\n- want: [%#v]\n-  got: [%#v]", want, got)
			}
		})
	}
}
